~ $ minikube start
üòÑ  minikube v1.31.2 on Darwin 12.0.1 (arm64)
üèÑ  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

~ kubectl cluster-info
~ $ kubectl get all
NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   2m7s

~ $ minikube addons enable ingress
üåü  The 'ingress' addon is enabled

~ $ kubectl get pods -n ingress-nginx // -n for namespace
NAME                                        READY   STATUS      RESTARTS   AGE
ingress-nginx-admission-create-ddzds        0/1     Completed   0          5m56s
ingress-nginx-admission-patch-42hqq         0/1     Completed   1          5m56s
ingress-nginx-controller-7799c6795f-zsk8m   1/1     Running     0          5m56s
~ $ kubectl delete pod <pod_name> 
~ $ kubectl describe pod <pod_name> 

~ $ kubectl create deployment web --image=gcr.io/google-samples/hello-app:1.0
deployment.apps/web created

~ $ kubectl expose deployment web --type=NodePort --port=8080
service/web exposed

~ $ kubectl get service web
NAME   TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
web    NodePort   10.101.115.183   <none>        8080:32226/TCP   11s
~ $ minikube service web --url
http://127.0.0.1:50601

~ $ kubectl apply -f ingress-web.yaml 
ingress.networking.k8s.io/example-ingress created

~ $ kubectl get ingress
NAME              CLASS   HOSTS              ADDRESS        PORTS   AGE
example-ingress   nginx   hello-world.info   192.168.49.2   80      30s

~ $ kubectl get all 
NAME                       READY   STATUS    RESTARTS   AGE
pod/web-548f6458b5-qrqbx   1/1     Running   0          8m19s

NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
service/kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          18m
service/web          NodePort    10.101.115.183   <none>        8080:32226/TCP   8m8s

NAME                  READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/web   1/1     1            1           8m19s

NAME                             DESIRED   CURRENT   READY   AGE
replicaset.apps/web-548f6458b5   1         1         1       8m19s

~ $ minikube delete
üíÄ  Removed all traces of the "minikube" cluster.


~ $ kubectl get configmap
NAME               DATA   AGE
kube-root-ca.crt   1      10m
mongo-config       1      3m16s

~ $ kubectl get secret   
NAME           TYPE     DATA   AGE
mongo-secret   Opaque   2      3m15s
~ $ kubectl get pod
~ $ kubectl get svc
~ $ minikube ip
~ $ kubectl get node
~ $ kubectl get node -o wide

minikube service <service-name> --url
kubectl get deployment <name> -o yaml > some.yml
kubectl get deployment -n default //namespace
kubectl delete -f config.yaml

kubernetes/config % minikube service webapp-service   
|-----------|----------------|-------------|---------------------------|
| NAMESPACE |      NAME      | TARGET PORT |            URL            |
|-----------|----------------|-------------|---------------------------|
| default   | webapp-service |        3000 | http://192.168.49.2:30100 |
|-----------|----------------|-------------|---------------------------|
üèÉ  Starting tunnel for service webapp-service.
|-----------|----------------|-------------|------------------------|
| NAMESPACE |      NAME      | TARGET PORT |          URL           |
|-----------|----------------|-------------|------------------------|
| default   | webapp-service |             | http://127.0.0.1:51622 |
|-----------|----------------|-------------|------------------------|

~ $ minikube addons enable ingress
~ $ kubectl get ingress -n kubernetes-dashboard
~ $ kubectl get ingress -n kubernetes-dashboard -w
~ $ kubectl get ingress -n kubernetes-dashboard --watch
~ $ kubectl describe ingress dashboard-ingress -n kubernetes-dashboard

~ $ kubectl get pod -n kube-system

~ $ kubectl get all -n kubernetes-dashboard
~ $ kubectl exec -it pod_name -- /bin/sh
~ $ kubectl tunnel
~ $ kubectl api-resources
